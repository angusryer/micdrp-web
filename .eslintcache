[{"C:\\Users\\Angus\\dv\\micdrp-web\\src\\index.js":"1","C:\\Users\\Angus\\dv\\micdrp-web\\src\\App.jsx":"2","C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\utilities.js":"3","C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\firebase.js":"4","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\index.js":"5","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Navigator.jsx":"6","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Perform\\Perform.jsx":"7","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Learn\\Learn.jsx":"8","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Login\\Login.jsx":"9","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Dashboard\\Dashboard.jsx":"10","C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\notes.js":"11","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\index.js":"12","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\Nav\\Nav.jsx":"13","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\AudioParser\\AudioParser.jsx":"14","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\NavMinimal\\NavMinimal.jsx":"15","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\AudioCanvas\\AudioCanvas.jsx":"16","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\NoteName\\NoteName.jsx":"17","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\Menu\\Menu.jsx":"18","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\StatItem\\StatItem.jsx":"19"},{"size":335,"mtime":1611283611874,"results":"20","hashOfConfig":"21"},{"size":1615,"mtime":1611324532048,"results":"22","hashOfConfig":"21"},{"size":1505,"mtime":1611283611891,"results":"23","hashOfConfig":"21"},{"size":1598,"mtime":1611324299687,"results":"24","hashOfConfig":"21"},{"size":273,"mtime":1611283611885,"results":"25","hashOfConfig":"21"},{"size":1961,"mtime":1611324502961,"results":"26","hashOfConfig":"21"},{"size":4405,"mtime":1611324473435,"results":"27","hashOfConfig":"21"},{"size":1731,"mtime":1611283611877,"results":"28","hashOfConfig":"21"},{"size":2093,"mtime":1611324370740,"results":"29","hashOfConfig":"21"},{"size":2594,"mtime":1611283611876,"results":"30","hashOfConfig":"21"},{"size":5557,"mtime":1611283611890,"results":"31","hashOfConfig":"21"},{"size":417,"mtime":1611283611874,"results":"32","hashOfConfig":"21"},{"size":1640,"mtime":1611283611868,"results":"33","hashOfConfig":"21"},{"size":1268,"mtime":1611283611863,"results":"34","hashOfConfig":"21"},{"size":1676,"mtime":1611283611869,"results":"35","hashOfConfig":"21"},{"size":4664,"mtime":1611283611862,"results":"36","hashOfConfig":"21"},{"size":457,"mtime":1611283611871,"results":"37","hashOfConfig":"21"},{"size":1284,"mtime":1611324325280,"results":"38","hashOfConfig":"21"},{"size":1153,"mtime":1611283611872,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"s6aw1j",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Angus\\dv\\micdrp-web\\src\\index.js",[],["85","86"],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\App.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\utilities.js",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\firebase.js",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\index.js",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Navigator.jsx",["87"],"import React, { useEffect, useState } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\nimport firebase from \"../utilities/firebase\";\r\nimport { Dashboard, Perform } from \".\";\r\nimport usePrevious from \"../utilities/utilities\";\r\n\r\nfunction Navigator({ user }) {\r\n\tconst [userData, setUserData] = useState({});\r\n\tconst history = useHistory();\r\n\tconst previousUser = usePrevious(user);\r\n\r\n\tconst getUserData = async (userProp) => {\r\n\t\tconst allUsers = await firebase.firestore().collection(\"users\");\r\n\t\tconst currentUser = await allUsers\r\n\t\t\t.where(\"uid\", \"==\", `${userProp.uid}`)\r\n\t\t\t.get();\r\n\t\tif (\r\n\t\t\t!!(currentUser.empty & (userProp | (typeof previousUser !== \"undefined\")))\r\n\t\t) {\r\n\t\t\tallUsers.add({\r\n\t\t\t\tuid: userProp.uid || previousUser.uid,\r\n\t\t\t\tperformanceData: [] || previousUser.performanceData,\r\n\t\t\t\tsettings: { defaultPage: \"dashboard\" } || previousUser.settings\r\n\t\t\t});\r\n\t\t\thistory.push(`/${user.urlName}/dashboard`);\r\n\t\t} else {\r\n\t\t\tif (currentUser.docs.length === 1) {\r\n\t\t\t\tcurrentUser.forEach((userDoc) => {\r\n\t\t\t\t\tconst userDocData = userDoc.data();\r\n\t\t\t\t\tsetUserData(userDocData);\r\n\t\t\t\t\thistory.push(\r\n\t\t\t\t\t\t`/${userProp.urlName}/${userDocData.settings.defaultPage}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\t// browsing directly to localhost/angusryer doesn't render anything\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (user) {\r\n\t\t\tgetUserData(user);\r\n\t\t}\r\n\t}, [user]);\r\n\r\n\tif (!userData) {\r\n\t\treturn (\r\n\t\t\t<div className='loading__container'>\r\n\t\t\t\t<ReactLoading\r\n\t\t\t\t\ttype={\"bubbles\"}\r\n\t\t\t\t\tcolor={\"#B65245\"}\r\n\t\t\t\t\theight={\"5rem\"}\r\n\t\t\t\t\twidth={\"5rem\"}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path='/:urlName/dashboard'>\r\n\t\t\t\t\t<Dashboard user={user} userData={userData} />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path='/:urlName/perform'>\r\n\t\t\t\t\t<Perform user={user} userData={userData} />\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navigator;\r\n","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Perform\\Perform.jsx",["88","89"],"import React, { useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NavMinimal, AudioParser, NoteName } from \"../../components\";\r\nimport \"./Perform.scss\";\r\nimport * as Notes from \"../../utilities/notes\";\r\nimport playImage from \"../../assets/images/play-circle-outline.png\";\r\nimport pauseImage from \"../../assets/images/pause-circle-outline.png\";\r\nimport previousImage from \"../../assets/images/play-skip-back-outline.png\";\r\nimport nextImage from \"../../assets/images/play-skip-forward-outline.png\";\r\n\r\n//Init audio context globally\r\nconst outputContext = new AudioContext({\r\n\tlatencyHint: \"interactive\",\r\n\tsampleRate: 48000\r\n});\r\n\r\n// global output audio variables\r\nlet gainNode;\r\nlet oscillator;\r\n\r\nconst playAudio = (frequency) => {\r\n\tgainNode = outputContext.createGain();\r\n\toscillator = outputContext.createOscillator();\r\n\tgainNode.connect(outputContext.destination);\r\n\toscillator.connect(gainNode);\r\n\toscillator.type = \"sine\";\r\n\toscillator.frequency.value = frequency;\r\n\tgainNode.gain.exponentialRampToValueAtTime(0.05, outputContext.currentTime);\r\n\toscillator.start(outputContext.currentTime);\r\n};\r\n\r\nconst stopAudio = () => {\r\n\tgainNode.gain.exponentialRampToValueAtTime(\r\n\t\t0.00001,\r\n\t\toutputContext.currentTime\r\n\t);\r\n\toscillator.stop(outputContext.currentTime);\r\n\toscillator.disconnect();\r\n};\r\n\r\n// MAIN COMPONENT\r\nfunction Perform({ user }) {\r\n\tconst [audioState, setAudioState] = useState(false);\r\n\tconst [currentFrequency, setCurrentFrequency] = useState(220.0);\r\n\tconst [audio, setAudio] = useState(null);\r\n\tconst performRef = useRef();\r\n\tconst [randomStep, setRandomStep] = useState(0);\r\n\r\n\tconst nextNote = async () => {\r\n\t\tconst nextNote = Notes.getRelativeNote(1, currentFrequency).freq;\r\n\t\tawait setCurrentFrequency(Notes.getRelativeNote(1, currentFrequency).freq);\r\n\t\tif (audioState) {\r\n\t\t\tstopAudio();\r\n\t\t\tplayAudio(nextNote);\r\n\t\t}\r\n\t};\r\n\r\n\tconst previousNote = async () => {\r\n\t\tconst previousNote = Notes.getRelativeNote(-1, currentFrequency).freq;\r\n\t\tawait setCurrentFrequency(previousNote);\r\n\t\tif (audioState) {\r\n\t\t\tstopAudio();\r\n\t\t\tplayAudio(previousNote);\r\n\t\t}\r\n\t};\r\n\r\n\t// ! To implement\r\n\tconst randomNote = async () => {\r\n\t\tconst randomNote = Notes.getRelativeNote(randomStep, currentFrequency).freq;\r\n\t\tawait setCurrentFrequency(randomNote);\r\n\t\tif (audioState) {\r\n\t\t\tstopAudio();\r\n\t\t\tplayAudio(randomNote);\r\n\t\t}\r\n\t};\r\n\r\n\tconst getMicrophone = async () => {\r\n\t\tconst audio = await navigator.mediaDevices.getUserMedia({\r\n\t\t\taudio: true,\r\n\t\t\tvideo: false\r\n\t\t});\r\n\t\tsetAudio(audio);\r\n\t};\r\n\r\n\tconst stopMicrophone = () => {\r\n\t\taudio.getTracks().forEach((track) => track.stop());\r\n\t\tsetAudio(null);\r\n\t};\r\n\r\n\tconst toggleMicrophone = () => (audio ? stopMicrophone() : getMicrophone());\r\n\r\n\tconst handleAudioState = async () => {\r\n\t\tawait toggleMicrophone();\r\n\t\tsetAudioState(!audioState);\r\n\t\tif (audioState) {\r\n\t\t\tstopAudio();\r\n\t\t} else {\r\n\t\t\tplayAudio(currentFrequency);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<main className='perform'>\r\n\t\t\t<div className='perform__container'>\r\n\t\t\t\t<NavMinimal userVisible user={user} currentPage='perform' />\r\n\t\t\t\t<section className='perform__activity' ref={performRef}>\r\n\t\t\t\t\t<hr className='perform__reference' />\r\n\t\t\t\t\t{audio ? (\r\n\t\t\t\t\t\t<AudioParser\r\n\t\t\t\t\t\t\tinputContext={outputContext}\r\n\t\t\t\t\t\t\taudio={audio}\r\n\t\t\t\t\t\t\tparentRef={performRef}\r\n\t\t\t\t\t\t\tcurrentFrequency={currentFrequency}\r\n\t\t\t\t\t\t\tgetRandomStep={setRandomStep}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t<NoteName currentFrequency={currentFrequency} />\r\n\t\t\t\t</section>\r\n\t\t\t\t<section className='perform__controls'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={previousNote}\r\n\t\t\t\t\t\tclassName='perform__controls-button--switchnote'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={previousImage}\r\n\t\t\t\t\t\t\talt='Previous note'\r\n\t\t\t\t\t\t\tclassName='perform__controls-button-image--switchnote'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={handleAudioState}\r\n\t\t\t\t\t\tclassName='perform__controls-button'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={audioState ? pauseImage : playImage}\r\n\t\t\t\t\t\t\talt='Play/Pause'\r\n\t\t\t\t\t\t\tclassName='perform__controls-button-image'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={nextNote}\r\n\t\t\t\t\t\tclassName='perform__controls-button--switchnote'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={nextImage}\r\n\t\t\t\t\t\t\talt='Next note'\r\n\t\t\t\t\t\t\tclassName='perform__controls-button-image--switchnote'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</section>\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default Perform;\r\n","C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Learn\\Learn.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Login\\Login.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\pages\\Dashboard\\Dashboard.jsx",["90"],"import React, { useEffect, useState } from 'react';\r\nimport { ReactLoading } from 'react-loading';\r\nimport { Link } from 'react-router-dom';\r\nimport { Nav, StatItem } from '../../components';\r\nimport './Dashboard.scss';\r\n\r\nfunction Dashboard({ user }) {\r\n\r\n  const [performanceData, setPerformanceData] = useState({\r\n    bestNote: 'B3',\r\n    challengeIntervalLow: 'A3',\r\n    challengeIntervalHigh: 'Eb3',\r\n    lowestNote: 'A2',\r\n    highestNote: 'F#4',\r\n    register: 'Tenor'\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get user performance data and store in object\r\n  }, [])\r\n\r\n  if (!user) {\r\n    return (\r\n        <div className=\"loading__container\">\r\n            <ReactLoading type={'bubbles'} color={'#B65245'} height={'5rem'} width={'5rem'} />\r\n        </div>\r\n    )\r\n} else {\r\n  return (\r\n    <main className=\"dashboard\">\r\n      <div className=\"dashboard__inner\">\r\n        <Nav user={user} currentPage=\"dash\" />\r\n        <section className=\"dashboard__progress-container\">\r\n          {/* place data visuals here */}\r\n        </section>\r\n        <section className=\"dashboard__stats-container\">\r\n          <div className=\"dashboard__stats-container-left\">\r\n            <StatItem type='range'\r\n              title='Belting Range'\r\n              value={performanceData.lowestNote}\r\n              value2={performanceData.highestNote}\r\n            />\r\n            <StatItem\r\n              title='Natural Register'\r\n              value={performanceData.register}\r\n            />\r\n          </div>\r\n          <div className=\"dashboard__stats-container-right\">\r\n            <StatItem\r\n              title='Power Note'\r\n              value={performanceData.bestNote}\r\n            />\r\n            <StatItem\r\n              type='range'\r\n              title='Weakest Interval'\r\n              value={performanceData.challengeIntervalLow}\r\n              value2={performanceData.challengeIntervalHigh}\r\n            />\r\n          </div>\r\n          </section>\r\n          <section className=\"dashboard__activity-container\">\r\n            <Link to={`/${user.urlName}/perform`}><div className=\"dashboard__activity\">\r\n              <span>Expand your belting range</span>\r\n            </div></Link>\r\n            <Link to={`/${user.urlName}/perform`}><div className=\"dashboard__activity\">\r\n              <span>Dances with Intervals</span>\r\n            </div></Link>\r\n            <Link to={`/${user.urlName}/perform`}><div className=\"dashboard__activity\">\r\n              <span>Crash Practice</span>\r\n            </div></Link>\r\n          </section>\r\n        </div>\r\n    </main>\r\n  )\r\n  }\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Angus\\dv\\micdrp-web\\src\\utilities\\notes.js",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\index.js",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\Nav\\Nav.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\AudioParser\\AudioParser.jsx",["91","92"],"import React, { useState, useEffect } from 'react';\r\nimport { AudioCanvas } from '../';\r\n\r\nlet dataArray;\r\nlet source;\r\nlet rafId;\r\n\r\nfunction AudioParser({ inputContext, audio, parentRef, currentFrequency,  getRandomStep }) {\r\n\r\n  const [audioData, setAudioData] = useState(new Float32Array(0));\r\n  const [analyser, setAnalyser] = useState(new AnalyserNode(inputContext))\r\n\r\n  const startUpAudio = async () => {\r\n    dataArray = new Float32Array(analyser.frequencyBinCount);\r\n    await setAudioData(dataArray);\r\n    source = inputContext.createMediaStreamSource(audio);\r\n    source.connect(analyser);\r\n    rafId = requestAnimationFrame(update)\r\n  }\r\n\r\n  useEffect(() => {\r\n    startUpAudio();\r\n\r\n    return () => {\r\n      cancelAnimationFrame(rafId);\r\n      analyser.disconnect();\r\n      source.disconnect();\r\n    }\r\n\r\n  }, [])\r\n\r\n  const update = async () => {\r\n    analyser.getFloatTimeDomainData(dataArray);\r\n    await setAudioData(dataArray);\r\n    rafId = requestAnimationFrame(update);\r\n  }\r\n\r\n  return (\r\n    <AudioCanvas audioData={audioData}\r\n      analyser={analyser}\r\n      parentRef={parentRef}\r\n      currentFrequency={currentFrequency}\r\n      inputContext={inputContext}\r\n      getRandomStep={getRandomStep}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AudioParser;","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\NavMinimal\\NavMinimal.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\AudioCanvas\\AudioCanvas.jsx",["93","94"],"import React, { useState, createRef, useEffect } from 'react';\r\nimport { PitchDetector } from 'pitchy';\r\nimport usePrevious from '../../utilities/utilities';\r\nimport * as Notes from '../../utilities/notes';\r\nimport './AudioCanvas.scss';\r\n\r\nlet detector;\r\nlet input;\r\n\r\nfunction AudioCanvas({ inputContext, analyser, audioData, parentRef, currentFrequency, getRandomStep }) {\r\n\r\n  const canvasRef = createRef();\r\n  const [inTune, setInTune] = useState(false);\r\n  const [yPosition, setYPosition] = useState(0);\r\n  const [canvasWidth, setCanvasWidth] = useState(0);\r\n  const [userPitch, setUserPitch] = useState(440);\r\n  const [onTimer, setOnTimer] = useState(0);\r\n  const prevTimer = usePrevious(onTimer);\r\n  const [screenWidth, setScreenWidth] = useState(parentRef.current.offsetWidth);\r\n  const [screenHeight, setScreenHeight] = useState(parentRef.current.offsetHeight);\r\n\r\n  // Get vertical position of user's pitch as a percentage of container height, expressed in pixels\r\n  const getVerticalPosition = (currentFrequency, userFrequency, clarity) => {\r\n    const high = Notes.getLinearPitchAsPercentage(Notes.getRelativeNote(2, currentFrequency).freq);\r\n    const low = Notes.getLinearPitchAsPercentage(Notes.getRelativeNote(-2, currentFrequency).freq);\r\n    const current = Notes.getLinearPitchAsPercentage(currentFrequency);\r\n    const user = Notes.getLinearPitchAsPercentage(userFrequency);\r\n    if (clarity < 0.4) { return 0 }\r\n    if (user > current) {\r\n      return (user >= high) ? -(screenHeight / 2) : -(((user - current) / (high - current)) * (screenHeight / 2));\r\n    } else if (user < current) {\r\n      return (user <= low) ? screenHeight / 2 : ((user - current) / (low - current)) * (screenHeight / 2);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  const getRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  const startOnPitchTimer = () => {\r\n      if (userPitch > (currentFrequency * 0.97) && userPitch < (currentFrequency * 1.03)) {\r\n        // user pitch is good!\r\n        setOnTimer(inputContext.currentTime);\r\n        setTimeout(() => {\r\n          if (onTimer === prevTimer) {\r\n            if (!inTune) {\r\n                setInTune(true);\r\n                getRandomStep(getRandomInt(-12, 12));\r\n              } else {\r\n                setInTune(false);\r\n              }\r\n            }\r\n        }, 3000)\r\n      }\r\n  }\r\n\r\n  const updateStates = async () => {\r\n    startOnPitchTimer();\r\n    analyser.getFloatTimeDomainData(input)\r\n    let [pitch, clarity] = detector.findPitch(input, inputContext.sampleRate);\r\n    await setUserPitch(pitch);\r\n    const verticalPosition = getVerticalPosition(currentFrequency, userPitch, clarity);\r\n    await setYPosition(verticalPosition * 0.8);\r\n    const canvasWidthTemp = (verticalPosition === 0) ? screenWidth : (parentRef.current.offsetWidth) - Math.abs((verticalPosition / (parentRef.current.offsetHeight / 2)) * parentRef.current.offsetWidth);\r\n    await setCanvasWidth(canvasWidthTemp);\r\n  }\r\n\r\n  // Draw this instant's audioData buffer strem values to canvas, then loop\r\n  let rId;\r\n  const update = (canvas) => {\r\n    const context = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    context.lineWidth = 2;\r\n    context.strokeStyle = '#DC9F6F'; //$ORANGE\r\n    context.clearRect(0, 0, width, height);\r\n    context.beginPath();\r\n    context.moveTo(0, height / 4);\r\n\r\n    let x = 0;\r\n    const sliceWidth = (width * 1) / audioData.length;\r\n    for (const item of audioData) {\r\n      const y = item * height;\r\n      context.lineTo(x, y);\r\n      x += sliceWidth;\r\n    }\r\n\r\n    context.lineTo(x, height / 2);\r\n    context.stroke();\r\n    rId = requestAnimationFrame(() => {\r\n      update(canvas)\r\n      updateStates();\r\n    });\r\n  }\r\n\r\n  // Continually run these updates: get user pitch, translate that into a vertical position,\r\n  // get canvas width from the vertical position, and re-draw the canvas\r\n  useEffect(() => {\r\n    detector = PitchDetector.forFloat32Array(analyser.fftSize);\r\n    input = new Float32Array(detector.inputLength);\r\n    updateStates();\r\n    update(canvasRef.current);\r\n    return () => {\r\n      cancelAnimationFrame(rId)\r\n    }\r\n  })\r\n\r\n  return (\r\n      <div className=\"audiocanvas__container\" style={{ transform: `translateY(${yPosition}px)` }}>\r\n        {(inTune) ? <div className=\"intune\">GREAT!</div> : null}\r\n        <canvas width={canvasWidth} height=\"25\" className=\"audiocanvas__canvas\" ref={canvasRef}><span>Canvas is not supported on this browser.</span></canvas>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default AudioCanvas;\r\n","C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\NoteName\\NoteName.jsx",[],["95","96"],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\Menu\\Menu.jsx",[],"C:\\Users\\Angus\\dv\\micdrp-web\\src\\components\\StatItem\\StatItem.jsx",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":45,"column":5,"nodeType":"103","endLine":45,"endColumn":11,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"109","line":68,"column":8,"nodeType":"107","messageId":"108","endLine":68,"endColumn":18},{"ruleId":"105","severity":1,"message":"110","line":9,"column":27,"nodeType":"107","messageId":"108","endLine":9,"endColumn":45},{"ruleId":"105","severity":1,"message":"111","line":11,"column":20,"nodeType":"107","messageId":"108","endLine":11,"endColumn":31},{"ruleId":"101","severity":1,"message":"112","line":30,"column":6,"nodeType":"103","endLine":30,"endColumn":8,"suggestions":"113"},{"ruleId":"105","severity":1,"message":"114","line":19,"column":23,"nodeType":"107","messageId":"108","endLine":19,"endColumn":37},{"ruleId":"105","severity":1,"message":"115","line":20,"column":24,"nodeType":"107","messageId":"108","endLine":20,"endColumn":39},{"ruleId":"97","replacedBy":"116"},{"ruleId":"99","replacedBy":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["120"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'randomNote' is assigned a value but never used.","'setPerformanceData' is assigned a value but never used.","'setAnalyser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'analyser' and 'startUpAudio'. Either include them or remove the dependency array.",["121"],"'setScreenWidth' is assigned a value but never used.","'setScreenHeight' is assigned a value but never used.",["118"],["119"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [getUserData, user]",{"range":"126","text":"127"},"Update the dependencies array to be: [analyser, startUpAudio]",{"range":"128","text":"129"},[1431,1437],"[getUserData, user]",[825,827],"[analyser, startUpAudio]"]